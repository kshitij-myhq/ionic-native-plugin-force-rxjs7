import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
var Mixpanel = /** @class */ (function (_super) {
    __extends(Mixpanel, _super);
    function Mixpanel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Mixpanel.prototype.alias = function (aliasId, originalId) { return cordova(this, "alias", {}, arguments); };
    Mixpanel.prototype.distinctId = function () { return cordova(this, "distinctId", {}, arguments); };
    Mixpanel.prototype.flush = function () { return cordova(this, "flush", {}, arguments); };
    Mixpanel.prototype.identify = function (distinctId, usePeople) { return cordova(this, "identify", {}, arguments); };
    Mixpanel.prototype.init = function (token) { return cordova(this, "init", {}, arguments); };
    Mixpanel.prototype.getSuperProperties = function () { return cordova(this, "getSuperProperties", {}, arguments); };
    Mixpanel.prototype.registerSuperProperties = function (superProperties) { return cordova(this, "registerSuperProperties", {}, arguments); };
    Mixpanel.prototype.registerSuperPropertiesOnce = function (superProperties) { return cordova(this, "registerSuperPropertiesOnce", {}, arguments); };
    Mixpanel.prototype.unregisterSuperProperty = function (superPropertyName) { return cordova(this, "unregisterSuperProperty", {}, arguments); };
    Mixpanel.prototype.reset = function () { return cordova(this, "reset", {}, arguments); };
    Mixpanel.prototype.timeEvent = function (eventName) { return cordova(this, "timeEvent", {}, arguments); };
    Mixpanel.prototype.track = function (eventName, eventProperties) { return cordova(this, "track", { "successIndex": 2, "errorIndex": 3 }, arguments); };
    Mixpanel.pluginName = "Mixpanel";
    Mixpanel.plugin = "cordova-plugin-mixpanel";
    Mixpanel.pluginRef = "mixpanel";
    Mixpanel.repo = "https://github.com/samzilverberg/cordova-mixpanel-plugin";
    Mixpanel.platforms = ["Android", "Browser", "iOS"];
    Mixpanel.decorators = [
        { type: Injectable }
    ];
    return Mixpanel;
}(IonicNativePlugin));
export { Mixpanel };
var MixpanelPeople = /** @class */ (function (_super) {
    __extends(MixpanelPeople, _super);
    function MixpanelPeople() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MixpanelPeople.prototype.append = function (appendObject) { return cordova(this, "append", {}, arguments); };
    MixpanelPeople.prototype.deleteUser = function () { return cordova(this, "deleteUser", {}, arguments); };
    MixpanelPeople.prototype.identify = function (distinctId) { return cordova(this, "identify", {}, arguments); };
    MixpanelPeople.prototype.increment = function (peopleProperties) { return cordova(this, "increment", {}, arguments); };
    MixpanelPeople.prototype.setPushId = function (pushId) { return cordova(this, "setPushId", {}, arguments); };
    MixpanelPeople.prototype.set = function (peopleProperties) { return cordova(this, "set", {}, arguments); };
    MixpanelPeople.prototype.setOnce = function (peopleProperties) { return cordova(this, "setOnce", {}, arguments); };
    MixpanelPeople.prototype.trackCharge = function (amount, chargeProperties) { return cordova(this, "trackCharge", {}, arguments); };
    MixpanelPeople.prototype.unset = function (propertiesArray) { return cordova(this, "unset", {}, arguments); };
    MixpanelPeople.prototype.union = function (unionObject) { return cordova(this, "union", {}, arguments); };
    MixpanelPeople.plugin = "cordova-plugin-mixpanel";
    MixpanelPeople.pluginRef = "mixpanel.people";
    MixpanelPeople.pluginName = "Mixpanel";
    MixpanelPeople.decorators = [
        { type: Injectable }
    ];
    return MixpanelPeople;
}(IonicNativePlugin));
export { MixpanelPeople };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL21peHBhbmVsL25neC9pbmRleC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLDhCQUFzQyxNQUFNLG9CQUFvQixDQUFDOztJQWlDMUMsNEJBQWlCOzs7O0lBUTdDLHdCQUFLLGFBQUMsT0FBZSxFQUFFLFVBQW1CO0lBUzFDLDZCQUFVO0lBUVYsd0JBQUs7SUFXTCwyQkFBUSxhQUFDLFVBQWtCLEVBQUUsU0FBbUI7SUFVaEQsdUJBQUksYUFBQyxLQUFhO0lBU2xCLHFDQUFrQjtJQVVsQiwwQ0FBdUIsYUFBQyxlQUFvQjtJQVU1Qyw4Q0FBMkIsYUFBQyxlQUFvQjtJQVVoRCwwQ0FBdUIsYUFBQyxpQkFBeUI7SUFTakQsd0JBQUs7SUFVTCw0QkFBUyxhQUFDLFNBQWlCO0lBYzNCLHdCQUFLLGFBQUMsU0FBaUIsRUFBRSxlQUFxQjs7Ozs7OztnQkF2SC9DLFVBQVU7O21CQWpDWDtFQWtDOEIsaUJBQWlCO1NBQWxDLFFBQVE7O0lBb0llLGtDQUFpQjs7OztJQU9uRCwrQkFBTSxhQUFDLFlBQWlCO0lBU3hCLG1DQUFVO0lBV1YsaUNBQVEsYUFBQyxVQUFrQjtJQVUzQixrQ0FBUyxhQUFDLGdCQUFxQjtJQVUvQixrQ0FBUyxhQUFDLE1BQWM7SUFVeEIsNEJBQUcsYUFBQyxnQkFBcUI7SUFVekIsZ0NBQU8sYUFBQyxnQkFBcUI7SUFXN0Isb0NBQVcsYUFBQyxNQUFjLEVBQUUsZ0JBQXFCO0lBVWpELDhCQUFLLGFBQUMsZUFBeUI7SUFVL0IsOEJBQUssYUFBQyxXQUFnQjs7Ozs7Z0JBbkd2QixVQUFVOzt5QkFyS1g7RUFzS29DLGlCQUFpQjtTQUF4QyxjQUFjIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29yZG92YSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5cbmRlY2xhcmUgdmFyIG1peHBhbmVsOiBhbnk7XG5cbi8qKlxuICogQG5hbWUgTWl4cGFuZWxcbiAqIEBkZXNjcmlwdGlvblxuICogQ29yZG92YSBQbHVnaW4gdGhhdCB3cmFwcyBNaXhwYW5lbCBTREsgZm9yIEFuZHJvaWQgYW5kIGlPU1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTWl4cGFuZWwgfSBmcm9tICdAaW9uaWMtbmF0aXZlL21peHBhbmVsL25neCc7XG4gKlxuICogY29uc3RydWN0b3IocHJpdmF0ZSBtaXhwYW5lbDogTWl4cGFuZWwsIHByaXZhdGUgbWl4cGFuZWxQZW9wbGU6IE1peHBhbmVsUGVvcGxlKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLm1peHBhbmVsLmluaXQodG9rZW4pXG4gKiAgIC50aGVuKG9uU3VjY2VzcylcbiAqICAgLmNhdGNoKG9uRXJyb3IpO1xuICpcbiAqIGBgYFxuICogQGNsYXNzZXNcbiAqIE1peHBhbmVsUGVvcGxlXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTWl4cGFuZWwnLFxuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1taXhwYW5lbCcsXG4gIHBsdWdpblJlZjogJ21peHBhbmVsJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS9zYW16aWx2ZXJiZXJnL2NvcmRvdmEtbWl4cGFuZWwtcGx1Z2luJyxcbiAgcGxhdGZvcm1zOiBbJ0FuZHJvaWQnLCAnQnJvd3NlcicsICdpT1MnXSxcbn0pXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgTWl4cGFuZWwgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBJZiBvcmlnaW5hbElkIGlzIG9taXR0ZWQsIGFsaWFzSWQgd2lsbCBiZSB1c2VkIGFzIG9yaWdpbmFsSWQuXG4gICAqIEBwYXJhbSBhbGlhc0lkIHtzdHJpbmd9XG4gICAqIEBwYXJhbSBvcmlnaW5hbElkIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGFsaWFzKGFsaWFzSWQ6IHN0cmluZywgb3JpZ2luYWxJZD86IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGRpc3RpbmN0SWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZmx1c2goKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogVGhlIHVzZVBlb3BsZSBwYXJhbWV0ZXIgaXMgdXNlZCBmb3IgdGhlIGlPUyBNaXhwYW5lbCBTREsuXG4gICAqIEBwYXJhbSBkaXN0aW5jdElkIHtzdHJpbmd9XG4gICAqIEBwYXJhbSB1c2VQZW9wbGUge2Jvb2xlYW59XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGlkZW50aWZ5KGRpc3RpbmN0SWQ6IHN0cmluZywgdXNlUGVvcGxlPzogYm9vbGVhbik6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB0b2tlbiB7c3RyaW5nfVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbml0KHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBnZXRTdXBlclByb3BlcnRpZXMoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHN1cGVyUHJvcGVydGllcyB7YW55fVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZWdpc3RlclN1cGVyUHJvcGVydGllcyhzdXBlclByb3BlcnRpZXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBzdXBlclByb3BlcnRpZXMge2FueX1cbiAgICogQHJldHVybnMge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgcmVnaXN0ZXJTdXBlclByb3BlcnRpZXNPbmNlKHN1cGVyUHJvcGVydGllczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHN1cGVyUHJvcGVydHlOYW1lIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHVucmVnaXN0ZXJTdXBlclByb3BlcnR5KHN1cGVyUHJvcGVydHlOYW1lOiBzdHJpbmcpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICByZXNldCgpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZXZlbnROYW1lIHtzdHJpbmd9XG4gICAqIEByZXR1cm5zIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHRpbWVFdmVudChldmVudE5hbWU6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBldmVudE5hbWUge3N0cmluZ31cbiAgICogQHBhcmFtIGV2ZW50UHJvcGVydGllcyB7YW55fSBvcHRpb25hbFxuICAgKiBAcmV0dXJucyB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIHN1Y2Nlc3NJbmRleDogMixcbiAgICBlcnJvckluZGV4OiAzLFxuICB9KVxuICB0cmFjayhldmVudE5hbWU6IHN0cmluZywgZXZlbnRQcm9wZXJ0aWVzPzogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW46ICdjb3Jkb3ZhLXBsdWdpbi1taXhwYW5lbCcsXG4gIHBsdWdpblJlZjogJ21peHBhbmVsLnBlb3BsZScsXG4gIHBsdWdpbk5hbWU6ICdNaXhwYW5lbCcsXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE1peHBhbmVsUGVvcGxlIGV4dGVuZHMgSW9uaWNOYXRpdmVQbHVnaW4ge1xuICAvKipcbiAgICpcbiAgICogQHBhcmFtIGFwcGVuZE9iamVjdCB7YW55fVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGFwcGVuZChhcHBlbmRPYmplY3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgZGVsZXRlVXNlcigpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gZGlzdGluY3RJZCB7c3RyaW5nfVxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqIEBkZXByZWNhdGVkIHNpbmNlIDIwMTYtMTEtMjEgLSBVc2UgTWl4cGFuZWwuaWRlbnRpZnkgaW5zdGVhZC5cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgaWRlbnRpZnkoZGlzdGluY3RJZDogc3RyaW5nKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHBlb3BsZVByb3BlcnRpZXMge3N0cmluZ31cbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICBpbmNyZW1lbnQocGVvcGxlUHJvcGVydGllczogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHB1c2hJZFxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59XG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHNldFB1c2hJZChwdXNoSWQ6IHN0cmluZyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBwZW9wbGVQcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0KHBlb3BsZVByb3BlcnRpZXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBwZW9wbGVQcm9wZXJ0aWVzIHthbnl9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgc2V0T25jZShwZW9wbGVQcm9wZXJ0aWVzOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0gYW1vdW50IHtudW1iZXJ9XG4gICAqIEBwYXJhbSBjaGFyZ2VQcm9wZXJ0aWVzXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdHJhY2tDaGFyZ2UoYW1vdW50OiBudW1iZXIsIGNoYXJnZVByb3BlcnRpZXM6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSBwcm9wZXJ0aWVzQXJyYXlcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB1bnNldChwcm9wZXJ0aWVzQXJyYXk6IHN0cmluZ1tdKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICpcbiAgICogQHBhcmFtIHVuaW9uT2JqZWN0IHthbnl9XG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn1cbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgdW5pb24odW5pb25PYmplY3Q6IGFueSk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=